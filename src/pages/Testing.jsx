import React from 'react';

function Testing() {
  return (
    <div>
      <h2>üõ†Ô∏è Testing de Usabilidad en React.js</h2>
      <p>
        Realizar pruebas de usabilidad en nuestras aplicaciones es clave para detectar problemas, mejorar la experiencia del usuario y garantizar accesibilidad. A continuaci√≥n, exploramos diferentes m√©todos y herramientas para evaluar la usabilidad en aplicaciones desarrolladas con React.js.
      </p>

      <h3 className="titulo-usabilidad"> Pruebas con Usuarios</h3>
      <p>
        Las pruebas con usuarios permiten observar el comportamiento real de las personas al interactuar con la aplicaci√≥n, identificando dificultades y √°reas de mejora.
      </p>
      <ul>
        <li> Selecciona un grupo representativo de usuarios.</li>
        <li> Define tareas espec√≠ficas para que los usuarios intenten completar.</li>
        <li> Observa c√≥mo navegan por la interfaz y d√≥nde encuentran problemas.</li>
        <li> Usa herramientas como <b className="code">Hotjar</b> o <b className="code">FullStory</b> para grabar sesiones.</li>
        <li> Recoge feedback con encuestas de satisfacci√≥n como <b>Google Forms</b> o <b>Typeform</b>.</li>
      </ul>

      <h3 className="titulo-usabilidad"> Herramientas para Evaluar Accesibilidad</h3>
      <p>
        Es importante asegurarse de que la aplicaci√≥n sea accesible para todos los usuarios, incluidas personas con discapacidades visuales, motoras o cognitivas.
      </p>
      <ul>
        <li> <b className="code">Lighthouse</b> ‚Äì Eval√∫a accesibilidad, rendimiento y SEO en Chrome DevTools.</li>
        <li> <b className="code">axe DevTools</b> ‚Äì Detecta errores de accesibilidad directamente en la app.</li>
        <li> <b className="code">WAVE</b> ‚Äì Analiza la accesibilidad web e identifica √°reas problem√°ticas.</li>
        <li> <b className="code">NVDA (NonVisual Desktop Access)</b> ‚Äì Prueba compatibilidad con lectores de pantalla.</li>
      </ul>

      <p><b>Ejemplo de uso de Lighthouse en Chrome DevTools:</b></p>
      <pre className="code">
        {`1. Abre DevTools (F12) > Pesta√±a "Lighthouse".`}
        {`\n2. Selecciona "Accessibility" y haz clic en "Generate Report".`}
        {`\n3. Revisa los errores y sigue las recomendaciones.`}
      </pre>

      <h3 className="titulo-usabilidad"> Test A/B en Dise√±o de Apps</h3>
      <p>
        Las pruebas A/B permiten comparar dos versiones de una interfaz para determinar cu√°l funciona mejor en t√©rminos de conversi√≥n y usabilidad.
      </p>
      <ul>
        <li> Define una m√©trica clara (ejemplo: aumento en clics o reducci√≥n en el tiempo de b√∫squeda).</li>
        <li> Crea dos versiones de la UI con diferencias espec√≠ficas (ejemplo: cambio de color en un bot√≥n).</li>
        <li> Muestra la versi√≥n A a un grupo de usuarios y la versi√≥n B a otro grupo.</li>
        <li> Analiza los resultados y determina cu√°l dise√±o mejora la experiencia.</li>
      </ul>

      <p><b>Ejemplo de un test A/B con botones:</b></p>
      <pre className="code">
        {`Grupo A: <button style={{ backgroundColor: 'blue' }}>Comprar</button>`}
        {`\nGrupo B: <button style={{ backgroundColor: 'green' }}>Comprar</button>`}
      </pre>

      <p>
        Implementando estos m√©todos, podemos optimizar nuestras aplicaciones para garantizar una mejor experiencia de usuario y accesibilidad.
      </p>
    </div>
  );
}

export default Testing;